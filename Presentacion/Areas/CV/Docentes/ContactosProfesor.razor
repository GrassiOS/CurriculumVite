@page "/CV/Docentes/{idDocente:int}/Contactos"
@using Entidades.DTO.CurriculumVite
@using Entidades.Modelos.CurriculumVite
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Contactos del Profesor - UABC</PageTitle>

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-2">
                    <li class="breadcrumb-item">
                        <a href="/CV/Docentes" class="text-decoration-none" style="color: #2D6B3C;">
                            <i class="fas fa-chalkboard-teacher me-1"></i>Docentes
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        Contactos de @nombreDocente
                    </li>
                </ol>
            </nav>
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="h3 mb-0" style="color: #2D6B3C;">
                    <i class="fas fa-address-book me-2"></i>
                    Contactos de @nombreDocente
                </h2>
                <button type="button" class="btn btn-primary" style="background-color: #2D6B3C; border-color: #2D6B3C;" 
                        @onclick="AgregarContacto">
                    <i class="fas fa-plus me-2"></i>Agregar Contacto
                </button>
            </div>
        </div>
    </div>

    <!-- Loading -->
    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-2 text-muted">Cargando contactos del profesor...</p>
        </div>
    }
    else
    {
        <!-- Formulario para Agregar/Editar Contacto -->
        @if (mostrarFormulario)
        {
            <div class="card shadow-sm mb-4">
                <div class="card-header py-3" style="background-color: #4BB463; color: white;">
                    <h5 class="mb-0">
                        <i class="fas fa-@(contactoSeleccionado.IdContacto == 0 ? "plus" : "edit") me-2"></i>
                        @(contactoSeleccionado.IdContacto == 0 ? "Agregar" : "Editar") Contacto
                    </h5>
                </div>
                <div class="card-body">
                    <EditForm Model="contactoSeleccionado" OnValidSubmit="GuardarContacto">
                        <DataAnnotationsValidator />
                        
                        <div class="row g-3">
                            <!-- Tipo de Contacto -->
                            <div class="col-md-6">
                                <label class="form-label fw-semibold">Tipo de Contacto <span class="text-danger">*</span></label>
                                <InputSelect @bind-Value="contactoSeleccionado.IdTpoContacto" class="form-select">
                                    <option value="">Seleccionar...</option>
                                    <option value="1">Email Personal</option>
                                    <option value="2">Facebook</option>
                                    <option value="3">LinkedIn</option>
                                    <option value="4">Twitter</option>
                                    <option value="5">Instagram</option>
                                    <option value="6">GitHub</option>
                                    <option value="7">ResearchGate</option>
                                    <option value="8">ORCID</option>
                                    <option value="9">Página Web Personal</option>
                                    <option value="10">Google Scholar</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => contactoSeleccionado.IdTpoContacto)" class="text-danger" />
                            </div>
                            
                            <!-- URL -->
                            <div class="col-md-6">
                                <label class="form-label fw-semibold">URL/Enlace <span class="text-danger">*</span></label>
                                <InputText @bind-Value="contactoSeleccionado.Url" class="form-control" 
                                           placeholder="Ej: https://www.facebook.com/usuario" />
                                <ValidationMessage For="@(() => contactoSeleccionado.Url)" class="text-danger" />
                                <small class="form-text text-muted">Incluye el protocolo (http:// o https://)</small>
                            </div>
                        </div>
                        
                        <div class="mt-3 d-flex justify-content-end">
                            <button type="button" class="btn btn-outline-secondary me-2" @onclick="CancelarEdicion">
                                <i class="fas fa-times me-2"></i>Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary" style="background-color: #2D6B3C; border-color: #2D6B3C;" 
                                    disabled="@guardando">
                                @if (guardando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                @(contactoSeleccionado.IdContacto == 0 ? "Agregar" : "Actualizar") Contacto
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }

        <!-- Lista de Contactos -->
        <div class="card shadow-sm">
            <div class="card-header py-3" style="background-color: #F4BF3A; color: #2D6B3C;">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>Contactos Registrados (@contactos.Count)
                </h5>
            </div>
            <div class="card-body p-0">
                @if (contactos.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead style="background-color: #f8f9fa;">
                                <tr>
                                    <th scope="col">Tipo de Contacto</th>
                                    <th scope="col">URL/Enlace</th>
                                    <th scope="col" class="text-center">Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var contacto in contactos)
                                {
                                    <tr>
                                        <td>
                                            <span class="badge rounded-pill" style="background-color: @GetColorTipoContacto(contacto.IdTpoContacto); color: white;">
                                                <i class="fas fa-@GetIconoTipoContacto(contacto.IdTpoContacto) me-1"></i>
                                                @contacto.TipoContactoNombre
                                            </span>
                                        </td>
                                        <td>
                                            <a href="@contacto.Url" target="_blank" class="text-decoration-none">
                                                @contacto.Url
                                                <i class="fas fa-external-link-alt ms-1 text-muted"></i>
                                            </a>
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => EditarContacto(contacto)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger btn-sm" 
                                                        @onclick="() => EliminarContacto(contacto)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-address-book fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No hay contactos registrados</h5>
                        <p class="text-muted">Agrega el primer contacto para comenzar</p>
                        <button type="button" class="btn btn-primary" style="background-color: #2D6B3C; border-color: #2D6B3C;" 
                                @onclick="AgregarContacto">
                            <i class="fas fa-plus me-2"></i>Agregar Primer Contacto
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Botón de Navegación -->
        <div class="mt-4 d-flex justify-content-between">
            <button type="button" class="btn btn-outline-secondary" @onclick="VolverADocentes">
                <i class="fas fa-arrow-left me-2"></i>Volver a Docentes
            </button>
            <button type="button" class="btn btn-outline-success" @onclick="ContinuarSiguientePaso">
                <i class="fas fa-arrow-right me-2"></i>Continuar a Educaciones
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public int IdDocente { get; set; }

    private List<ContactoProfesorDTO> contactos = new();
    private ContactoProfesorDTO contactoSeleccionado = new();
    private bool cargando = true;
    private bool guardando = false;
    private bool mostrarFormulario = false;
    private string nombreDocente = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO: Cargar nombre del docente
            nombreDocente = $"Docente #{IdDocente}";
            
            // TODO: Cargar contactos existentes
            await CargarContactos();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task CargarContactos()
    {
        // TODO: Implementar carga de contactos desde base de datos
        // Por ahora simulamos datos vacíos
        contactos = new List<ContactoProfesorDTO>();
    }

    private void AgregarContacto()
    {
        contactoSeleccionado = new ContactoProfesorDTO { IdDocente = IdDocente };
        mostrarFormulario = true;
        StateHasChanged();
    }

    private void EditarContacto(ContactoProfesorDTO contacto)
    {
        contactoSeleccionado = new ContactoProfesorDTO
        {
            IdContacto = contacto.IdContacto,
            IdDocente = contacto.IdDocente,
            IdTpoContacto = contacto.IdTpoContacto,
            Url = contacto.Url
        };
        mostrarFormulario = true;
        StateHasChanged();
    }

    private void CancelarEdicion()
    {
        mostrarFormulario = false;
        contactoSeleccionado = new();
        StateHasChanged();
    }

    private async Task GuardarContacto()
    {
        try
        {
            guardando = true;
            StateHasChanged();

            // TODO: Implementar guardado en base de datos
            await Task.Delay(500); // Simular guardado

            await JSRuntime.InvokeVoidAsync("alert", "Contacto guardado exitosamente");
            
            mostrarFormulario = false;
            await CargarContactos();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
        finally
        {
            guardando = false;
            StateHasChanged();
        }
    }

    private async Task EliminarContacto(ContactoProfesorDTO contacto)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"¿Estás seguro de que deseas eliminar este contacto?");

        if (confirmado)
        {
            try
            {
                // TODO: Implementar eliminación en base de datos
                await Task.Delay(200); // Simular eliminación
                
                await JSRuntime.InvokeVoidAsync("alert", "Contacto eliminado exitosamente");
                await CargarContactos();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }

    private string GetColorTipoContacto(int tipoContacto)
    {
        return tipoContacto switch
        {
            1 => "#dc3545", // Email - Rojo
            2 => "#1877f2", // Facebook - Azul
            3 => "#0a66c2", // LinkedIn - Azul profesional
            4 => "#1da1f2", // Twitter - Azul claro
            5 => "#e4405f", // Instagram - Rosa
            6 => "#333", // GitHub - Negro
            7 => "#00d4aa", // ResearchGate - Verde agua
            8 => "#a6ce39", // ORCID - Verde
            9 => "#6f42c1", // Web Personal - Morado
            10 => "#4285f4", // Google Scholar - Azul Google
            _ => "#6c757d" // Default - Gris
        };
    }

    private string GetIconoTipoContacto(int tipoContacto)
    {
        return tipoContacto switch
        {
            1 => "envelope",
            2 => "facebook",
            3 => "linkedin",
            4 => "twitter",
            5 => "instagram",
            6 => "github",
            7 => "flask",
            8 => "id-badge",
            9 => "globe",
            10 => "graduation-cap",
            _ => "link"
        };
    }

    private void VolverADocentes()
    {
        Navigation.NavigateTo("/CV/Docentes");
    }

    private void ContinuarSiguientePaso()
    {
        // TODO: Navegar a la siguiente sección (Educaciones)
        Navigation.NavigateTo($"/CV/Docentes/{IdDocente}/Educaciones");
    }
} 